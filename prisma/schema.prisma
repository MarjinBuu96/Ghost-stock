generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Alert {
  id          String   @id @default(cuid())
  storeId     String
  store       Store    @relation(fields: [storeId], references: [id], onDelete: Cascade)
  sku         String
  product     String
  systemQty   Int
  expectedMin Int
  expectedMax Int
  severity    String
  status      String   @default("open")
  createdAt   DateTime @default(now())
  uniqueHash  String

  @@unique([storeId, uniqueHash])
  @@index([storeId, status])
}

model UserSettings {
  id                String   @id @default(cuid())
  userEmail         String   @unique
  currency          String   @default("USD")
  plan              String   @default("starter")
  stripeCustomerId  String?
  slackWebhookUrl   String?
  notificationEmail String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model Organization {
  id            String         @id @default(cuid())
  name          String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  stores        Store[]
  memberships   Membership[]
  auditLogs     AuditLog[]
  rules         Rule[]
  countSessions CountSession[]
}

model Membership {
  id        String       @id @default(cuid())
  orgId     String
  org       Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  userEmail String
  role      String
  createdAt DateTime     @default(now())

  @@unique([orgId, userEmail])
  @@index([userEmail])
}

model AuditLog {
  id        String        @id @default(cuid())
  orgId     String?
  org       Organization? @relation(fields: [orgId], references: [id], onDelete: SetNull)
  actor     String
  action    String
  target    String?
  meta      Json?
  createdAt DateTime      @default(now())

  @@index([orgId, createdAt])
  @@index([createdAt])
}

model Rule {
  id        String       @id @default(cuid())
  orgId     String
  org       Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  name      String
  isActive  Boolean      @default(true)
  jsonLogic Json
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  @@index([orgId, isActive])
}

model CountSession {
  id          String       @id @default(cuid())
  orgId       String
  org         Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  startedBy   String
  assignee    String?
  dueAt       DateTime?
  status      String       @default("open")
  createdAt   DateTime     @default(now())
  completedAt DateTime?
  items       CountItem[]
}

model CountItem {
  id        String       @id @default(cuid())
  sessionId String
  session   CountSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  sku       String
  product   String?
  expected  Int?
  counted   Int?
  status    String       @default("pending")
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

model Store {
  id             String        @id @default(cuid())
  shop           String        @unique
  accessToken    String
  currency       String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  lastScanAt     DateTime?
  alerts         Alert[]
  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id])
}

model OAuthState {
  state     String   @id
  shop      String
  createdAt DateTime @default(now())

  @@index([shop, createdAt])
}

model Kpi {
  id        String   @id @default(cuid())
  name      String
  value     Float
  createdAt DateTime @default(now())
}
