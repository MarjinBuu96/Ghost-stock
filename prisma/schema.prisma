generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL") // pooled connection (Neon Pooler)
  directUrl = env("DIRECT_URL") // direct connection (writer)
}

model Alert {
  id        String @id @default(cuid())
  userEmail String

  // Relation to Store (required)
  storeId String
  store   Store  @relation(fields: [storeId], references: [id], onDelete: Cascade)

  sku         String
  product     String
  systemQty   Int
  expectedMin Int
  expectedMax Int
  severity    String // "high" | "med"
  status      String   @default("open")
  createdAt   DateTime @default(now())

  // Daily dedupe key (e.g., "SKU|severity|YYYY-MM-DD")
  uniqueHash String

  @@unique([storeId, uniqueHash])
  @@index([userEmail, status])
  @@index([storeId, status])
}

model UserSettings {
  id                String   @id @default(cuid())
  userEmail         String   @unique
  currency          String   @default("USD")
  plan              String   @default("starter") // free | starter | pro | enterprise
  stripeCustomerId  String?
  slackWebhookUrl   String?
  notificationEmail String?
  scanCount         Int      @default(0) // 
  lastScanReset     DateTime @default(now()) // 
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model Organization {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  stores        Store[]
  memberships   Membership[]
  auditLogs     AuditLog[]
  rules         Rule[]
  countSessions CountSession[]
}

model Membership {
  id    String       @id @default(cuid())
  orgId String
  org   Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)

  userEmail String
  role      String // 'owner' | 'manager' | 'viewer'

  createdAt DateTime @default(now())

  @@unique([orgId, userEmail])
  @@index([userEmail])
}

model AuditLog {
  id String @id @default(cuid())

  // Make org optional so we can log before org is created
  orgId String?
  org   Organization? @relation(fields: [orgId], references: [id], onDelete: SetNull)

  actor     String // email (or shop string)
  action    String // e.g. "alert.resolve", "count.start", "rule.create"
  target    String? // e.g. alertId / sessionId / ruleId / sku
  meta      Json?
  createdAt DateTime @default(now())

  @@index([orgId, createdAt])
  @@index([createdAt])
}

model Rule {
  id    String       @id @default(cuid())
  orgId String
  org   Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)

  name      String
  isActive  Boolean @default(true)
  jsonLogic Json

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([orgId, isActive])
}

model CountSession {
  id    String       @id @default(cuid())
  orgId String
  org   Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)

  startedBy String // email/shop who started it
  assignee  String?
  dueAt     DateTime?
  status    String    @default("open") // open | completed | canceled

  createdAt   DateTime  @default(now())
  completedAt DateTime?

  items CountItem[]
}

model CountItem {
  id        String       @id @default(cuid())
  sessionId String
  session   CountSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  sku      String
  product  String?
  expected Int?
  counted  Int?
  status   String  @default("pending") // pending | counted | skipped

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Store {
  id String @id @default(cuid())

  // org is optional for backfill/new installs
  orgId String?
  org   Organization? @relation(fields: [orgId], references: [id], onDelete: SetNull)

  userEmail   String
  shop        String    @unique
  accessToken String
  currency    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  lastScanAt  DateTime?

  alerts Alert[]

  @@index([userEmail])
}

model OAuthState {
  state     String   @id // random UUID, unique
  shop      String
  createdAt DateTime @default(now())

  @@index([shop, createdAt])
}

model Kpi {
  id        String   @id @default(cuid())
  name      String
  value     Float
  createdAt DateTime @default(now())
}
